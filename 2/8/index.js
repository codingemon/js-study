// template literals (strings)
// 문자열을 다르게 제작할 수 있는 방법

// backquote 문자열의 장점:
// 1. 엔터키 가능
// 2. 중간중간 변수넣기 쉬움
// var 문자 = `손흥민`;

// (예전방식) `문자` + 변수
// var 변수 = "손흥민";
// var 문자1 = "안녕하세요 저는 " + 변수;

// ES6
// `문자${변수}`
// var 변수 = "이강인";
// var 문자 = `안녕하세요 저는 ${변수}`;
// var 템플릿 = `<div>${변수}</div>`

// backquote 문자열 + 함수
// tagged literal
var 변수 = "이강인";
var 문자 = `안녕하세요 저는 ${변수} 입니다.`;

// function 해체분석기(문자들, 변수들) {
// // 파라미터 1. 문자들을 Array화 해줌
//   console.log(문자들);
// // 파라미터 2. ${변수}를 뜻함
//   console.log(변수들);
// }
// // `문자`를 해체분석할 수 있음
// // - 단어 순서를 변경하거나, 단어를 제거하거나, ${변수}위치를 옮기거나(쉽게 가능)
// 해체분석기`안녕하세요 저는 ${변수} 입니다.`;

function 해체분석기(문자들, 변수들) {
  console.log(문자들[1] + 변수들 + 문자들[0]); // 입니다 이강인 안녕하세요 저는
}
// `문자`를 해체분석할 수 있음
// - 단어 순서를 변경하거나, 단어를 제거하거나, ${변수}위치를 옮기거나(쉽게 가능)
해체분석기`안녕하세요 저는 ${변수} 입니다.`;
